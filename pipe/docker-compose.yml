# docker-compose.yml
# Defines the streamlined services for the MEXC data ingestion pipeline.
# This setup is optimized for deployment on Ubuntu minimal LTS.

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Kafka retention policies for automatic cleanup - optimized for memory efficiency
      KAFKA_LOG_RETENTION_MS: 600000  # 10 minute retention (reduced from 1 hour)
      KAFKA_LOG_RETENTION_BYTES: 104857600  # 100MB per topic (reduced from 500MB)
      KAFKA_LOG_SEGMENT_BYTES: 10485760  # 10MB segments for more frequent cleanup
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_CLEANUP_INTERVAL_MS: 120000  # 2 minute cleanup cycles (increased frequency)
      KAFKA_LOG_DELETE_DELAY_MS: 30000  # 30 second delay before deletion (faster cleanup)
      # JVM heap settings for memory management
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  clickhouse:
    image: clickhouse/clickhouse-server:24.3-alpine
    container_name: clickhouse
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - ch_data_volume:/var/lib/clickhouse
    environment:
      - CLICKHOUSE_USER=user
      - CLICKHOUSE_PASSWORD=password
      - CLICKHOUSE_DB=mexc_data
    ulimits:
      nproc: 65535
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "clickhouse-client", "-q", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  kafka-cleanup:
    build:
      context: .
      dockerfile: Dockerfile.kafka-cleanup
    container_name: kafka-cleanup
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./kafka-cleanup.py:/app/kafka-cleanup.py
      - ./config.py:/app/config.py
      - /var/log:/var/log
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

volumes:
  ch_data_volume: