#!/bin/bash

# MEXC Multi-Symbol Proxy Deployment - Arch Linux Setup Script
# Usage: ./setup-arch
# Requires: Docker, Docker Compose, Arch Linux
# Compatible: Arch Linux with pacman package manager

set -e  # Exit on any error

echo "🚀 MEXC Multi-Symbol Cryptocurrency Pipeline Setup (Arch Linux)"
echo "================================================================"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if running as root
if [ "$EUID" -eq 0 ]; then
    print_error "Please don't run this script as root"
    exit 1
fi

# Check prerequisites
echo "🔍 Checking prerequisites..."

# Check Docker
if ! command -v docker &> /dev/null; then
    print_error "Docker is not installed. Please install Docker first:"
    echo "  sudo pacman -S docker"
    echo "  sudo systemctl enable docker"
    echo "  sudo systemctl start docker"
    echo "  sudo usermod -aG docker $USER"
    echo "  newgrp docker"
    exit 1
fi

# Check Docker Compose
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    print_error "Docker Compose is not installed. Please install Docker Compose first:"
    echo "  sudo pacman -S docker-compose"
    echo "  # OR: sudo pacman -S docker (includes compose plugin)"
    exit 1
fi

# Check if user is in docker group
if ! groups | grep -q docker; then
    print_error "User is not in docker group. Please run:"
    echo "  sudo usermod -aG docker $USER"
    echo "  newgrp docker"
    exit 1
fi

# Test Docker
if ! docker ps &> /dev/null; then
    print_error "Cannot connect to Docker daemon. Make sure Docker is running and you have permissions"
    exit 1
fi

print_status "Docker and Docker Compose are available"

# Check Python
if ! command -v python3 &> /dev/null; then
    print_error "Python 3 is not installed. Please install Python 3.8+"
    exit 1
fi

# Update package database and install required packages
echo ""
echo "📦 Updating package database and installing dependencies..."

# Update pacman package database
echo "Updating package database..."
sudo pacman -Sy
print_status "Package database updated"

# Install required packages
echo "Installing required packages..."
sudo pacman -S --needed python base-devel python-setuptools python-pip
print_status "Required packages installed successfully"

print_status "Python 3 and all dependencies are available"

# Create Python virtual environment
echo ""
echo "🐍 Setting up Python virtual environment..."

if [ -d "venv" ]; then
    print_warning "Virtual environment already exists, removing old one"
    rm -rf venv
fi

python3 -m venv venv
print_status "Virtual environment created"

# Activate virtual environment
source venv/bin/activate
print_status "Virtual environment activated"

# Upgrade pip
pip install --upgrade pip
print_status "pip upgraded"

# Install Python dependencies
echo ""
echo "📦 Installing Python dependencies..."

if [ ! -f "requirements.txt" ]; then
    print_error "requirements.txt not found in current directory"
    exit 1
fi

pip install -r requirements.txt
print_status "Python dependencies installed"

# No .env file needed for proxy-based setup
echo ""
echo "🔧 Configuration validation..."
print_status "No additional configuration required - using Tor proxy separation"

# Validate required files
echo ""
echo "📋 Validating project files..."

required_files=(
    "docker-compose.yml"
    "Dockerfile"
    "clickhouse.xml"
    "config.py"
    "setup-ch.py"
    "client-btc.py"
    "client-eth.py"
    "client-sol.py"
)

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        print_error "Required file missing: $file"
        exit 1
    fi
done

print_status "All required files present"

# Test ClickHouse config
echo ""
echo "🗄️  Validating ClickHouse configuration..."

if [ -f "clickhouse.xml" ]; then
    # Basic XML validation
    if python3 -c "import xml.etree.ElementTree as ET; ET.parse('clickhouse.xml')" 2>/dev/null; then
        print_status "ClickHouse configuration is valid XML"
    else
        print_error "ClickHouse configuration has invalid XML syntax"
        exit 1
    fi
else
    print_error "ClickHouse configuration file missing"
    exit 1
fi

# Check if docker-compose file is valid
echo ""
echo "🐳 Validating Docker Compose configuration..."

# Try docker-compose first, then docker compose
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker-compose"
else
    DOCKER_COMPOSE_CMD="docker compose"
fi

if $DOCKER_COMPOSE_CMD config >/dev/null 2>&1; then
    print_status "Docker Compose configuration is valid"
else
    print_error "Docker Compose configuration has errors"
    $DOCKER_COMPOSE_CMD config
    exit 1
fi

# Pull base Docker images to save time later
echo ""
echo "🖼️  Pre-downloading Docker images..."

docker pull python:3.9-slim
docker pull clickhouse/clickhouse-server:24.3-alpine
print_status "Base Docker images downloaded"

# Create exports directory with proper permissions
echo ""
echo "📁 Setting up exports directory with proper permissions..."

mkdir -p exports
sudo chown -R 1000:1000 exports/ 2>/dev/null || chown -R 1000:1000 exports/ 2>/dev/null || {
    print_warning "Could not set exports directory ownership, you may need to run: sudo chown -R 1000:1000 exports/"
}
chmod 755 exports/
print_status "Exports directory created with proper permissions"

# Create deployment summary
echo ""
echo "📊 Setup Summary"
echo "================"
echo "✅ Virtual environment: $(pwd)/venv"
echo "✅ Python dependencies: Installed"
echo "✅ Required packages: Installed (Arch Linux with pacman)"
echo "✅ Configuration files: Validated"
echo "✅ Docker images: Pre-downloaded"
echo "✅ Exports directory: Created with proper permissions (1000:1000)"
echo "✅ Project structure: Complete"
echo ""

# Final instructions
echo "🎯 Next Steps"
echo "============="
echo ""
echo "1. Start the complete multi-symbol proxy deployment:"
echo "   docker compose up -d"
echo ""
echo "2. Monitor the deployment:"
echo "   docker compose logs -f"
echo ""
echo "3. Verify data collection (each container uses different IP via Tor proxy):"
echo "   ./verify"
echo "   # OR manually: source venv/bin/activate && CLICKHOUSE_HOST=localhost python3 verify_data.py"
echo ""

print_status "Setup completed successfully!"
print_status "Run 'docker compose up -d' to start deployment"

echo ""
echo "📖 For troubleshooting, see README.md"